 [{
	"ID": 520,
	"post_author": "1",
	"post_date": "2014-08-01 02:06:42",
	"post_date_gmt": "2014-08-01 02:06:42",
	"post_content": "<a href=\"http:\/\/carlofontanos.com\/wp-content\/uploads\/2014\/08\/ajax-pagination-wordpress-front-end.jpg\"><img src=\"http:\/\/carlofontanos.com\/wp-content\/uploads\/2014\/08\/ajax-pagination-wordpress-front-end.jpg\" alt=\"ajax-pagination-wordpress-front-end\" width=\"640\" height=\"278\" class=\"alignnone size-full wp-image-537\" \/><\/a>\r\n\r\n<a href = \"http:\/\/carlofontanos.com\/demo-wordpress-frontend-ajax-pagination\/\" class = \"btn btn-info\" target = \"_blank\">Demo<\/a>\r\n\r\n\r\n<h2>Tutorial<\/h2>\r\nStep 1: Create a custom page in WordPress, if you do not know what a custom WordPress page is, read on this link: http:\/\/codex.wordpress.org\/Template_Hierarchy\r\n\r\nStep 2: Add this code into your custom page (Explanations are on the codes)\r\n\r\n[cc lang = \"javascript\"]\r\n<?php get_header(); ?>\r\n\r\n\t<div class=\"col-md-12 content\">\r\n\t\t<div class = \"inner-box content no-right-margin darkviolet\">\r\n\t\t\t<script type=\"text\/javascript\">\r\n\t\t\tjQuery(document).ready(function($) {\r\n\t\t\t\t\/\/ This is required for AJAX to work on our page\r\n\t\t\t\tvar ajaxurl = '<?php echo admin_url('admin-ajax.php'); ?>';\r\n\t\t\t\t\r\n\t\t\t\tfunction cvf_load_all_posts(page){\r\n\t\t\t\t\t\/\/ Start the transition\r\n\t\t\t\t\t$(\".cvf_pag_loading\").fadeIn().css('background','#ccc');\r\n\t\t\t\t\t\r\n\t\t\t\t\t\/\/ Data to receive from our server\r\n\t\t\t\t\t\/\/ the value in 'action' is the key that will be identified by the 'wp_ajax_' hook \r\n\t\t\t\t\tvar data = {\r\n\t\t\t\t\t\tpage: page,\r\n\t\t\t\t\t\taction: \"demo-pagination-load-posts\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\t\/\/ Send the data\r\n\t\t\t\t\t$.post(ajaxurl, data, function(response) {\r\n\t\t\t\t\t\t\/\/ If successful Append the data into our html container\r\n\t\t\t\t\t\t$(\".cvf_universal_container\").html(response);\r\n\t\t\t\t\t\t\/\/ End the transition\r\n\t\t\t\t\t\t$(\".cvf_pag_loading\").css({'background':'none', 'transition':'all 1s ease-out'});\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\/\/ Load page 1 as the default\r\n\t\t\t\tcvf_load_all_posts(1);\r\n\t\t\t\t\r\n\t\t\t\t\/\/ Handle the clicks\r\n\t\t\t\t$('.cvf_universal_container .cvf-universal-pagination li.active').live('click',function(){\r\n\t\t\t\t\tvar page = $(this).attr('p');\r\n\t\t\t\t\tcvf_load_all_posts(page);\r\n\t\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t});\t\r\n\t\t\t<\/script>\r\n\t\t\t<div class = \"cvf_pag_loading\">\r\n\t\t\t\t<div class = \"cvf_universal_container\">\r\n\t\t\t\t\t<div class=\"cvf-universal-content\"><\/div>\r\n\t\t\t\t<\/div>\r\n\t\t\t<\/div>\r\n\t\t\t\r\n\t\t<\/div>\t\t\r\n\t<\/div>\r\n\t\r\n<?php get_footer(); ?>\r\n[\/cc]\r\n\r\nWe might have different page structures so feel free to edit the code.\r\n\r\nStep 3: Add this block of code into your functions.php (Explanations are on the codes)\r\n\r\n[cc lang = \"php\"]\r\n\/\/ Receive the Request post that came from AJAX\r\nadd_action( 'wp_ajax_demo-pagination-load-posts', 'cvf_demo_pagination_load_posts' );\r\n\/\/ We allow non-logged in users to access our pagination\r\nadd_action( 'wp_ajax_nopriv_demo-pagination-load-posts', 'cvf_demo_pagination_load_posts' ); \r\nfunction cvf_demo_pagination_load_posts() {\r\n\t\r\n\tglobal $wpdb;\r\n\t\/\/ Set default variables\r\n\t$msg = '';\r\n\t\r\n\tif(isset($_POST['page'])){\r\n\t\t\/\/ Sanitize the received page\t\r\n\t\t$page = sanitize_text_field($_POST['page']);\r\n\t\t$cur_page = $page;\r\n\t\t$page -= 1;\r\n\t\t\/\/ Set the number of results to display\r\n\t\t$per_page = 5;\r\n\t\t$previous_btn = true;\r\n\t\t$next_btn = true;\r\n\t\t$first_btn = true;\r\n\t\t$last_btn = true;\r\n\t\t$start = $page * $per_page;\r\n\t\t\r\n\t\t\/\/ Set the table where we will be querying data\r\n\t\t$table_name = $wpdb->prefix . \"posts\";\r\n\t\t\r\n\t\t\/\/ Query the necessary posts\r\n\t\t$all_blog_posts = $wpdb->get_results($wpdb->prepare(\"\r\n\t\t\tSELECT * FROM \" . $table_name . \" WHERE post_type = 'post' AND post_status = 'publish' ORDER BY post_date DESC LIMIT %d, %d\", $start, $per_page ) );\r\n\t\t\r\n\t\t\/\/ At the same time, count the number of queried posts\r\n\t\t$count = $wpdb->get_var($wpdb->prepare(\"\r\n\t\t\tSELECT COUNT(ID) FROM \" . $table_name . \" WHERE post_type = 'post' AND post_status = 'publish'\", array() ) );\r\n\t\t\r\n\t\t\/**\r\n\t\t * Use WP_Query:\r\n\t\t *\r\n\t\t$all_blog_posts = new WP_Query(\r\n\t\t\tarray(\r\n\t\t\t\t'post_type' \t\t=> 'post',\r\n\t\t\t\t'post_status ' \t\t=> 'publish',\r\n\t\t\t\t'orderby' \t\t\t=> 'post_date',\r\n\t\t\t\t'order'   \t\t\t=> 'DESC',\r\n\t\t\t\t'posts_per_page'   \t=> $per_page,\r\n\t\t\t\t'offset'   \t\t\t=> $start\r\n\t\t\t)\r\n\t\t);\r\n\t\t\t\r\n\t\t$count = new WP_Query(\r\n\t\t\tarray(\r\n\t\t\t\t'post_type' \t\t=> 'post',\r\n\t\t\t\t'post_status ' \t\t=> 'publish',\r\n\t\t\t\t'posts_per_page'\t=> -1\r\n\t\t\t)\r\n\t\t);\r\n\t\t*\/\r\n\t\t\r\n\t\t\/\/ Loop into all the posts\r\n\t\tforeach($all_blog_posts as $key => $post): \r\n\t\t\t\r\n\t\t\t\/\/ Set the desired output into a variable\r\n\t\t\t$msg .= '\r\n\t\t\t<div class = \"col-md-12\">\t\t\r\n\t\t\t\t<h2><a href=\"' . get_permalink($post->ID) . '\">' . $post->post_title . '<\/a><\/h2>\r\n\t\t\t\t<p>' . $post->post_excerpt . '<\/p>\r\n\t\t\t<\/div>';\r\n\t\t\t\r\n\t\tendforeach;\r\n\t\t\r\n\t\t\/\/ Optional, wrap the output into a container\r\n\t\t$msg = \"<div class='cvf-universal-content'>\" . $msg . \"<\/div><br class = 'clear' \/>\";\r\n\t\t\r\n\t\t\/\/ This is where the magic happens\r\n\t\t$no_of_paginations = ceil($count \/ $per_page);\r\n\r\n\t\tif ($cur_page >= 7) {\r\n\t\t\t$start_loop = $cur_page - 3;\r\n\t\t\tif ($no_of_paginations > $cur_page + 3)\r\n\t\t\t\t$end_loop = $cur_page + 3;\r\n\t\t\telse if ($cur_page <= $no_of_paginations && $cur_page > $no_of_paginations - 6) {\r\n\t\t\t\t$start_loop = $no_of_paginations - 6;\r\n\t\t\t\t$end_loop = $no_of_paginations;\r\n\t\t\t} else {\r\n\t\t\t\t$end_loop = $no_of_paginations;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t$start_loop = 1;\r\n\t\t\tif ($no_of_paginations > 7)\r\n\t\t\t\t$end_loop = 7;\r\n\t\t\telse\r\n\t\t\t\t$end_loop = $no_of_paginations;\r\n\t\t}\r\n\t\t\r\n\t\t\/\/ Pagination Buttons logic\t\t\r\n\t\t$pag_container .= \"\r\n\t\t<div class='cvf-universal-pagination'>\r\n\t\t\t<ul>\";\r\n\r\n\t\tif ($first_btn && $cur_page > 1) {\r\n\t\t\t$pag_container .= \"<li p='1' class='active'>First<\/li>\";\r\n\t\t} else if ($first_btn) {\r\n\t\t\t$pag_container .= \"<li p='1' class='inactive'>First<\/li>\";\r\n\t\t}\r\n\r\n\t\tif ($previous_btn && $cur_page > 1) {\r\n\t\t\t$pre = $cur_page - 1;\r\n\t\t\t$pag_container .= \"<li p='$pre' class='active'>Previous<\/li>\";\r\n\t\t} else if ($previous_btn) {\r\n\t\t\t$pag_container .= \"<li class='inactive'>Previous<\/li>\";\r\n\t\t}\r\n\t\tfor ($i = $start_loop; $i <= $end_loop; $i++) {\r\n\r\n\t\t\tif ($cur_page == $i)\r\n\t\t\t\t$pag_container .= \"<li p='$i' class = 'selected' >{$i}<\/li>\";\r\n\t\t\telse\r\n\t\t\t\t$pag_container .= \"<li p='$i' class='active'>{$i}<\/li>\";\r\n\t\t}\r\n\t\t\r\n\t\tif ($next_btn && $cur_page < $no_of_paginations) {\r\n\t\t\t$nex = $cur_page + 1;\r\n\t\t\t$pag_container .= \"<li p='$nex' class='active'>Next<\/li>\";\r\n\t\t} else if ($next_btn) {\r\n\t\t\t$pag_container .= \"<li class='inactive'>Next<\/li>\";\r\n\t\t}\r\n\r\n\t\tif ($last_btn && $cur_page < $no_of_paginations) {\r\n\t\t\t$pag_container .= \"<li p='$no_of_paginations' class='active'>Last<\/li>\";\r\n\t\t} else if ($last_btn) {\r\n\t\t\t$pag_container .= \"<li p='$no_of_paginations' class='inactive'>Last<\/li>\";\r\n\t\t}\r\n\r\n\t\t$pag_container = $pag_container . \"\r\n\t\t\t<\/ul>\r\n\t\t<\/div>\";\r\n\t\t\r\n\t\t\/\/ We echo the final output\r\n\t\techo \r\n\t\t'<div class = \"cvf-pagination-content\">' . $msg . '<\/div>' . \r\n\t\t'<div class = \"cvf-pagination-nav\">' . $pag_container . '<\/div>';\r\n\t\t\r\n\t}\r\n\t\/\/ Always exit to avoid further execution\r\n\texit();\r\n}\r\n[\/cc]\r\n\r\nYou can add some styling to your pagination by appending this block of CSS code into your style.css\r\n\r\n[cc lang = \"css\"]\r\n.cvf_pag_loading {padding: 20px;}\r\n.cvf-universal-pagination ul {margin: 0; padding: 0;}\r\n.cvf-universal-pagination ul li {display: inline; margin: 3px; padding: 4px 8px; background: #FFF; color: black; }\r\n.cvf-universal-pagination ul li.active:hover {cursor: pointer; background: #1E8CBE; color: white; }\r\n.cvf-universal-pagination ul li.inactive {background: #7E7E7E;}\r\n.cvf-universal-pagination ul li.selected {background: #1E8CBE; color: white;}\r\n[\/cc]\r\n\r\nNow you can start using this as your base AJAX Pagination structure to implement more sophisticated logics.",
	"post_title": "WordPress Frontend AJAX Pagination",
	"post_excerpt": "Create a Front-end AJAX pagination in your WordPress blog",
	"post_status": "publish",
	"comment_status": "open",
	"ping_status": "closed",
	"post_password": "",
	"post_name": "wordpress-frontend-ajax-pagination",
	"to_ping": "",
	"pinged": "",
	"post_modified": "2015-08-25 02:58:48",
	"post_modified_gmt": "2015-08-25 02:58:48",
	"post_content_filtered": "",
	"post_parent": 0,
	"guid": "http:\/\/carlofontanos.com\/?p=520",
	"menu_order": 0,
	"post_type": "post",
	"post_mime_type": "",
	"comment_count": "0",
	"filter": "raw"
}, {
	"ID": 997,
	"post_author": "1",
	"post_date": "2014-12-10 10:15:00",
	"post_date_gmt": "2014-12-10 10:15:00",
	"post_content": "<a href=\"http:\/\/carlofontanos.com\/wp-content\/uploads\/2014\/12\/codeigniter-banner.jpg\"><img src=\"http:\/\/carlofontanos.com\/wp-content\/uploads\/2014\/12\/codeigniter-banner.jpg\" alt=\"codeigniter-banner\" width=\"1600\" height=\"257\" class=\"alignnone size-full wp-image-995\" \/><\/a>\r\n\r\nTo be able to use this POST Model Library, you need the USER Model Library from my previous tutorial.\r\n\r\nSome of the functions bellow are not exactly similar to how WordPress built their procedural functions so you will have to study and learn how to use the methods.\r\n\r\nNOTE: The development of this Library is currently on-going, I may add, update, or remove some functions for improvement purposes and best practices. Use this Library at your own risk!.\r\n\r\n<h3>Available Methods:<\/h3>\r\n<ul>\r\n<li>get_post()<\/li>\r\n<li>get_posts()<\/li>\r\n<li>insert_post()<\/li>\r\n<li>update_post()<\/li>\r\n<li>delete_post()<\/li>\r\n<li>get_post_meta()<\/li>\r\n<li>add_post_meta()<\/li>\r\n<li>update_post_meta()<\/li>\r\n<li>delete_post_meta()<\/li>\r\n<li>insert_post_category()<\/li>\r\n<li>update_post_category()<\/li>\r\n<li>add_term()<\/li>\r\n<li>update_term()<\/li>\r\n<li>delete_term()<\/li>\r\n<li>is_term()<\/li>\r\n<li>is_post()<\/li>\r\n<\/ul>\r\n\r\n[cc lang = \"php\"]\r\n<?php \r\n\/**\r\n * Post_model\r\n *\r\n * @author  \tCarl Victor Fontanos\r\n * @authorurl\twww.carlofontanos.com\r\n * @version \t1.0\r\n *\r\n *\/\r\n \r\n \r\nif ( ! defined('BASEPATH')) exit('No direct script access allowed');\r\n\r\nclass Post_model extends CI_Model {\r\n\r\n\tpublic function __construct() {\r\n\t\tparent::__construct();\r\n\t}\r\n\t\r\n\tpublic function get_post($post_identifier_array = '') {\r\n\t\t\r\n\t\tif(!empty($post_identifier_array)){\r\n\t\t\r\n\t\t\textract($post_identifier_array);\r\n\t\t\t\t\r\n\t\t\tif(!empty($post_name)){\r\n\t\t\t\t$where = array('post_name' => $post_name);\r\n\t\t\t} elseif($post_id) {\r\n\t\t\t\t$where = array('ID' => $post_id);\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$post = $this->db->get_where('ci_posts', $where, 1, 0);\r\n\t\t\t\r\n\t\t\tif($post->num_rows() > 0){\r\n\t\t\t\treturn $post->result()[0];\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t} \r\n\t\t\r\n\t}\r\n\t\r\n\t\/**\r\n\tUsage: \r\n\t$args = array(\r\n\t\t'posts_per_page'   => 5,\r\n\t\t'post_author'\t   => 17,\r\n\t\t'category'         => 1,\r\n\t\t'category_name'    => 'uncategorized',\r\n\t\t'orderby'          => 'post_date',\r\n\t\t'order'            => 'ASC',\r\n\t\t'post_type'        => 'page',\r\n\t\t'post_status'      => 'publish'\r\n\t);\r\n\t$result = $post->get_posts($args));\r\n\tprint_r($result);\r\n\t*\/\r\n\tpublic function get_posts($post_data = '') {\r\n\t\t\r\n\t\t$post_author = '';\r\n\t\t$term_id = '';\r\n\t\t$slug = '';\r\n\t\t$post_status = '';\r\n\t\t$post_type = '';\t\r\n\t\t$orderby = '';\r\n\t\t$order = '';\r\n\t\t$limit = '';\r\n\t\r\n\t\tif(!empty($post_data)) {\r\n\t\t\r\n\t\t\textract($post_data);\r\n\t\t\t\t\r\n\t\t\tif(!empty($post_author)) {\r\n\t\t\t\t$post_author = ' AND p.post_author = '.$post_author.' ';\r\n\t\t\t}\r\n\t\t\tif(!empty($category)) {\r\n\t\t\t\t$term_id = ' AND t.term_id = '.$category;\r\n\t\t\t}\r\n\t\t\tif(!empty($category_name)) {\r\n\t\t\t\t$slug = ' AND t.slug = \"'.$category_name.'\" ';\r\n\t\t\t}\r\n\t\t\tif(!empty($post_status)) {\r\n\t\t\t\t$post_status = ' AND p.post_status = \"'.$post_status.'\" ';\r\n\t\t\t}\r\n\t\t\tif(!empty($post_type)) {\r\n\t\t\t\t$post_type = ' AND p.post_type = \"'.$post_type.'\" ';\r\n\t\t\t}\r\n\t\t\tif(!empty($orderby)) {\r\n\t\t\t\t$orderby = ' ORDER BY '.$orderby.' ';\r\n\t\t\t}\r\n\t\t\tif(!empty($order)) {\r\n\t\t\t\t$order = ' '.$order.' ';\r\n\t\t\t}\r\n\t\t\tif(!empty($posts_per_page)) {\r\n\t\t\t\t$limit = ' LIMIT '.$posts_per_page.' ';\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t$posts = $this->db->query('\r\n\t\t\tSELECT p.*, t.term_id AS category_id, t.slug AS category_name FROM ci_posts p\r\n\t\t\tLEFT JOIN ci_term_relationships tr ON tr.object_id = p.ID\r\n\t\t\tLEFT JOIN ci_terms t ON t.term_id = tr.term_taxonomy_id\r\n\t\t\tWHERE p.ID > 0 '.$post_author.$term_id.$slug.$post_status.$post_type.$orderby.$order.$limit.' \r\n\t\t');\r\n\t\t\r\n\t\tif($posts->num_rows() > 0){\r\n\t\t\treturn $posts->result();\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\/**\r\n\tUsage: \r\n\t$args = array(\r\n\t\t'post_author'\t\t=>\t$current_user->ID,\r\n\t\t'post_content'\t\t=>\t'Some Description',\r\n\t\t'post_title'\t\t=>\t'Some Title',\r\n\t\t'post_excerpt'\t\t=>\t'Short Description',\r\n\t\t'post_type'\t\t\t=> \t'post',\r\n\t\t'post_category'\t\t=> \t1\r\n\t);\r\n\t\r\n\t$post_id = $post->insert_post($args);\r\n\techo $post_id;\r\n\t*\/\r\n\tpublic function insert_post($post_data_array) {\r\n\t\t\r\n\t\t$current_user = current_user();\r\n\t\t\r\n\t\t$post_content = '';\r\n\t\t$post_title = '';\r\n\t\t$post_excerpt = '';\r\n\t\t$post_type = 'post';\r\n\t\t$post_category = 1;\r\n\t\t\r\n\t\textract($post_data_array);\r\n\t\t\r\n\t\tif(!empty($post_author) && $this->user_model->is_user($post_author)){\r\n\t\t\t$author = $post_author;\r\n\t\t} elseif(is_user_logged_in()) {\r\n\t\t\t$author = $current_user->ID;\r\n\t\t} else {\r\n\t\t\t$author = $this->user_model->get_superadmin();\r\n\t\t}\r\n\t\t\r\n\t\t$post_data = array(\r\n\t\t\t'post_author'\t\t=>\t$author,\r\n\t\t\t'post_date'\t\t\t=>\tdate(\"Y-m-d H:i:s\", time()),\r\n\t\t\t'post_date_gmt'\t\t=>\tdate(\"Y-m-d H:i:s\", time()),\r\n\t\t\t'post_content'\t\t=>\t$post_content,\r\n\t\t\t'post_title'\t\t=>\t$post_title,\r\n\t\t\t'post_excerpt'\t\t=>\t$post_excerpt,\r\n\t\t\t'post_status'\t\t=>\t'publish',\r\n\t\t\t'post_type'\t\t\t=>\t$post_type,\r\n\t\t\t'post_name'\t\t\t=>\turl_title($post_title, 'dash', TRUE),\t\r\n\t\t\t'post_modified'\t\t=>\tdate(\"Y-m-d H:i:s\", time()),\t\r\n\t\t\t'post_modified_gmt'\t=>\tdate(\"Y-m-d H:i:s\", time()),\t\r\n\t\t);\r\n\t\t\r\n\t\t$cleaned_data = $this->security->xss_clean($post_data);\r\n\t\t\r\n\t\t$this->db->insert('ci_posts', $cleaned_data);\r\n\t\t\r\n\t\t$check_insert = $this->db->get_where('ci_posts', $cleaned_data, 1, 0);\r\n\t\t\r\n\t\tif($check_insert->num_rows() > 0){\t\t\r\n\t\t\t\r\n\t\t\t$category = $post_category;\r\n\t\t\t\r\n\t\t\t$post = $check_insert->row();\r\n\t\t\tself::insert_post_category($post->ID, $category);\r\n\t\t\t\r\n\t\t\treturn $post->ID;\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t\/**\r\n\tUsage: \r\n\t$args = array(\r\n\t\t'ID'\t\t\t\t=> \t1008,\r\n\t\t'post_author'\t\t=>\t16,\r\n\t\t'post_content'\t\t=>\t'Some Description',\r\n\t\t'post_title'\t\t=>\t'Some Title',\r\n\t\t'post_excerpt'\t\t=>\t'Short Description',\r\n\t\t'post_type'\t\t\t=> \t'page',\r\n\t\t'post_category'\t\t=> \t1\r\n\t);\r\n\t\r\n\t$post_id = $post->update_post($args);\r\n\techo $post_id;\r\n\t*\/\r\n\tpublic function update_post($post_data_array) {\r\n\t\t\r\n\t\t$current_user = current_user();\r\n\t\t\r\n\t\textract($post_data_array);\r\n\t\t\r\n\t\t$post_data = '';\r\n\t\t\r\n\t\tif(!empty($ID) && self::is_post($ID)){\r\n\t\t\r\n\t\t\tif(!empty($post_author) && $this->user_model->is_user($post_author)) {\r\n\t\t\t\t$post_data['post_author'] = $post_author;\r\n\t\t\t} elseif (is_user_logged_in()) {\r\n\t\t\t\t$post_data['post_author'] = $current_user->ID;\r\n\t\t\t} else {\r\n\t\t\t\t$post_data['post_author'] = $this->user_model->get_superadmin();\r\n\t\t\t}\r\n\t\t\tif(!empty($post_content)) {\r\n\t\t\t\t$post_data['post_content'] = $post_content;\r\n\t\t\t}\t\r\n\t\t\tif(!empty($post_title)) {\r\n\t\t\t\t$post_data['post_title'] = $post_title;\r\n\t\t\t\t$post_data['post_name'] = url_title($post_title, 'dash', TRUE);\r\n\t\t\t}\r\n\t\t\tif(!empty($post_excerpt)) {\r\n\t\t\t\t$post_data['post_excerpt'] = $post_excerpt;\r\n\t\t\t}\r\n\t\t\tif(!empty($post_status)) {\r\n\t\t\t\t$post_data['post_status'] = $post_status;\r\n\t\t\t}\r\n\t\t\tif(!empty($post_type)) {\r\n\t\t\t\t$post_data['post_type'] = $post_type;\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t$post_data['post_modified'] = date(\"Y-m-d H:i:s\", time());\t\r\n\t\t\t$post_data['post_modified_gmt'] = date(\"Y-m-d H:i:s\", time());\t\r\n\t\t\t\t\r\n\t\t\t$cleaned_data = $this->security->xss_clean($post_data);\r\n\t\t\t\r\n\t\t\t$this->db->where('ID', $ID);\r\n\t\t\t$this->db->update('ci_posts', $cleaned_data);\r\n\t\t\t\r\n\t\t\t$check_update = $this->db->get_where('ci_posts', $cleaned_data, 1, 0);\r\n\t\t\r\n\t\t\tif($check_update->num_rows() > 0){\t\t\r\n\t\t\t\t\r\n\t\t\t\t$post = $check_update->row();\r\n\t\t\t\t\r\n\t\t\t\tif(!empty($post_category) && $post_category > 0 && self::is_term($post_category)) {\r\n\t\t\t\t\tself::update_post_category($post->ID, $post_category);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn $post->ID;\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t\t\r\n\t\t}\t\r\n\t\t\t\t\r\n\t}\r\n\t\r\n\tpublic function delete_post($post_id) {\r\n\t\r\n\t\t$this->db->delete('ci_posts', array('ID' => $post_id));\r\n\t\t$this->db->delete('ci_term_relationships', array('object_id' => $post_id));\r\n\t\tself::delete_post_meta($post_id);\r\n\t\t\r\n\t\t$delete_check = $this->db->query('\r\n\t\t\tSELECT * from ci_posts p \r\n\t\t\tLEFT JOIN ci_postmeta pm ON p.ID = pm.post_id \r\n\t\t\tLEFT JOIN ci_term_relationships tr ON p.ID = tr.object_id \r\n\t\t\tWHERE p.ID = ?', array($post_id) );\r\n\t\t\r\n\t\tif($delete_check->num_rows() == 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic function get_post_meta($post_id, $key = '', $single = TRUE) {\r\n\t\r\n\t\t$where = '';\r\n\t\t\r\n\t\tif($key){\r\n\t\t\t$where .= ' AND meta_key = \"'.$key.'\"';\r\n\t\t}\r\n\t\t\r\n\t\t$post_meta = $this->db->query('SELECT * FROM ci_postmeta WHERE post_id = ?'.$where, array($post_id) );\r\n\t\t\r\n\t\tif($single){\r\n\t\t\r\n\t\t\t$row = $post_meta->row();\r\n\t\t\tif($row){\r\n\t\t\t\treturn $row->meta_value;\r\n\t\t\t} else {\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t} else {\r\n\t\t\treturn $post_meta->result();\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic function add_post_meta($post_id, $meta_key, $meta_value) {\r\n\t\t\r\n\t\t$post_metadata = array(\r\n\t\t\t'post_id'\t\t\t=>\t$post_id,\r\n\t\t\t'meta_key'\t\t\t=>\t$meta_key,\r\n\t\t\t'meta_value'\t\t=>\t$meta_value\r\n\t\t);\r\n\t\t\r\n\t\t$cleaned_data = $this->security->xss_clean($post_metadata);\r\n\t\t\r\n\t\t$this->db->insert('ci_postmeta', $cleaned_data);\r\n\t\t\r\n\t\t$add_meta_check = $this->db->get_where('ci_postmeta', array('post_id' => $post_id, 'meta_key' => $meta_key, 'meta_value' => $meta_value));\r\n\t\t\r\n\t\tif($add_meta_check->num_rows() > 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic function update_post_meta($post_id, $meta_key, $meta_value) {\r\n\t\t\r\n\t\t$meta_exits = $this->db->get_where('ci_postmeta', array('post_id' => $post_id, 'meta_key' => $meta_key), 1, 0);\r\n\t\t\r\n\t\tif($meta_exits->num_rows() > 0){\r\n\t\t\r\n\t\t\t$post_metadata = array(\r\n\t\t\t\t'meta_value'\t\t=>\t$meta_value\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t$cleaned_data = $this->security->xss_clean($post_metadata);\r\n\t\t\t\r\n\t\t\t$this->db->where(array('post_id' =>\t$post_id, 'meta_key' =>\t$meta_key));\r\n\t\t\t$this->db->update('ci_postmeta', $cleaned_data);\r\n\t\t\t\r\n\t\t\t$update_meta_check = $this->db->get_where('ci_postmeta', array('post_id' => $post_id, 'meta_key' => $meta_key, 'meta_value' => $meta_value), 1, 0);\r\n\t\t\t\r\n\t\t\tif($update_meta_check->num_rows() > 0){\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tself::add_post_meta($post_id, $meta_key, $meta_value);\r\n\t\t\treturn true;\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic function delete_post_meta($post_id, $meta_key = '') {\r\n\t\r\n\t\tif(!empty($meta_key)){\r\n\t\t\t$post_metadata = array(\r\n\t\t\t\t'post_id'\t\t\t=>\t$post_id,\r\n\t\t\t\t'meta_key'\t\t\t=>\t$meta_key\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$post_metadata = array(\r\n\t\t\t\t'post_id'\t\t\t=>\t$post_id\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t$cleaned_data = $this->security->xss_clean($post_metadata);\r\n\t\t\t\r\n\t\t$this->db->where($cleaned_data);\r\n\t\t$this->db->delete('ci_postmeta');\r\n\r\n\t\t$delete_meta_check = $this->db->get_where('ci_postmeta', $post_metadata, 1, 0);\r\n\t\t\t\r\n\t\tif($delete_meta_check->num_rows() == 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic function insert_post_category($post_id, $term_id) {\r\n\t\t\r\n\t\tif(!empty($term_id) && !empty($post_id) && self::is_term($term_id) && self::is_post($post_id)){\r\n\t\t\t\r\n\t\t\t$data = array(\r\n\t\t\t\t'object_id'\t\t\t=>\t$post_id,\r\n\t\t\t\t'term_taxonomy_id'\t=>\t$term_id,\r\n\t\t\t\t'term_order'\t\t=>\t0\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t$cleaned_data = $this->security->xss_clean($data);\r\n\t\t\t\r\n\t\t\t$this->db->insert('ci_term_relationships', $cleaned_data);\r\n\t\t\t\r\n\t\t\t$check_insert = $this->db->get_where('ci_term_relationships', $cleaned_data, 1, 0);\r\n\t\t\r\n\t\t\tif($check_insert->num_rows() > 0){\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t$term = $check_insert->row();\r\n\r\n\t\t\t\treturn $term->term_taxonomy_id;\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic function update_post_category($post_id, $term_id) {\r\n\t\t\r\n\t\tif(!empty($term_id) && !empty($post_id) && self::is_term($term_id) && self::is_post($post_id)){\r\n\t\t\t\r\n\t\t\t$data = array(\r\n\t\t\t\t'term_taxonomy_id'\t=>\t$term_id,\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t$cleaned_data = $this->security->xss_clean($data);\r\n\t\t\t\r\n\t\t\t$this->db->where('object_id', $post_id);\r\n\t\t\t$this->db->update('ci_term_relationships', $cleaned_data);\r\n\t\t\t\r\n\t\t\t$check_update = $this->db->get_where('ci_term_relationships', $cleaned_data, 1, 0);\r\n\t\t\r\n\t\t\tif($check_update->num_rows() > 0){\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t$term = $check_update->row();\r\n\r\n\t\t\t\treturn $term->term_taxonomy_id;\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t\/**\r\n\tUsage: \r\n\t$args = array(\r\n\t\t'name'\t\t\t=> 'Cateory Test',\r\n\t\t'slug'\t\t\t=> '',\r\n\t\t'description'\t=> 'A very beautiful category',\r\n\t\t'taxonomy'\t\t=> 'category',\r\n\t\t'parent'\t\t=> ''\r\n\t);\r\n\t$term_id = $post->add_term($args);\r\n\techo $term_id;\r\n\t*\/\r\n\tpublic function add_term($term_data){\r\n\t\t\r\n\t\t$description = '';\r\n\t\t\r\n\t\textract($term_data); \r\n\t\t\r\n\t\t$term = '';\r\n\t\t\r\n\t\tif(!empty($name) && !empty($taxonomy)){\r\n\t\t\r\n\t\t\tif(!empty($name)){\r\n\t\t\t\t$term['name'] = $name;\r\n\t\t\t}\r\n\t\t\tif(!empty($slug)){\r\n\t\t\t\t$term['slug'] = $slug;\r\n\t\t\t} else {\r\n\t\t\t\t$term['slug'] = url_title($name, 'dash', TRUE);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t$this->db->insert('ci_terms', $term);\r\n\t\t\r\n\t\t\t$get_term_id = $this->db->get_where('ci_terms', $term);\r\n\t\t\t\r\n\t\t\tif($get_term_id->num_rows > 0){\r\n\t\t\t\t$term = $get_term_id->row();\r\n\t\t\t\t\r\n\t\t\t\t$term_taxonomy = array(\r\n\t\t\t\t\t'term_taxonomy_id' \t=> $term->term_id,\r\n\t\t\t\t\t'term_id' \t\t\t=> $term->term_id,\r\n\t\t\t\t\t'taxonomy' \t\t\t=> $taxonomy,\r\n\t\t\t\t\t'parent' \t\t\t=> $parent ? $parent : 0,\r\n\t\t\t\t\t'description'\t\t=> $description\r\n\t\t\t\t);\r\n\t\t\t\t\r\n\t\t\t\t$this->db->insert('ci_term_taxonomy', $term_taxonomy);\r\n\t\t\t\t\r\n\t\t\t\t$term_taxonomy_check = $this->db->get_where('ci_term_taxonomy', $term_taxonomy);\r\n\t\t\t\t\r\n\t\t\t\tif($term_taxonomy_check->num_rows > 0){\r\n\t\t\t\t\t$term_taxonomy = $term_taxonomy_check->row();\r\n\t\t\t\t\treturn $term_taxonomy->term_taxonomy_id;\r\n\t\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t\/**\r\n\tUsage: \r\n\t$post->update_term(1, array(\r\n\t\t'name' \t\t=> 'No Category',\r\n\t\t'slug' \t\t=> 'no-category',\r\n\t\t'taxonomy'\t=> 'category',\r\n\t\t'parent' \t=> 4\r\n\t));\r\n\t*\/\r\n\tpublic function update_term($term_id, $term_array){\r\n\t\t\r\n\t\tif(!empty($term_id) && !empty($term_array)){\r\n\t\t\t\t\t\t\t\r\n\t\t\textract($term_array);\r\n\t\t\t\r\n\t\t\tif(!empty($taxonomy) || !empty($parent)) {\r\n\t\t\t\t\r\n\t\t\t\t$term_taxonomy = '';\r\n\t\t\t\t\r\n\t\t\t\tif(!empty($taxonomy)){\r\n\t\t\t\t\t$term_taxonomy['taxonomy'] = $taxonomy;\r\n\t\t\t\t}\r\n\t\t\t\tif(isset($parent)){\r\n\t\t\t\t\t$term_taxonomy['parent']  = $parent;\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t$this->db->where('term_taxonomy_id', $term_id);\r\n\t\t\t\t$this->db->update('ci_term_taxonomy', $term_taxonomy);\r\n\t\t\t}\t\r\n\t\t\t\t\t\t\r\n\t\t\tif(!empty($name)) {\r\n\t\t\t\t\r\n\t\t\t\t$term = '';\r\n\t\t\t\t\r\n\t\t\t\tif(!empty($name)){\r\n\t\t\t\t\t$term['name'] = $name;\r\n\t\t\t\t}\r\n\t\t\t\tif(!empty($slug)){\r\n\t\t\t\t\t$term['slug'] = $slug;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t$term['slug'] = url_title($name, 'dash', TRUE);\r\n\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t$this->db->where('term_id', $term_id);\r\n\t\t\t\t$this->db->update('ci_terms', $term);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic function delete_term($term_id){\r\n\t\t\t\r\n\t\t# Fix all parents, set back to 0\r\n\t\t$get_cat_childrens = $this->db->get_where('ci_term_taxonomy', array('parent' => $term_id));\r\n\t\t\r\n\t\tif($get_cat_childrens->num_rows() > 0){\r\n\t\t\r\n\t\t\tforeach($get_cat_childrens->result() as $term_cat){\r\n\t\t\t\t$this->db->where('term_id', $term_cat->term_id);\r\n\t\t\t\t$this->db->update('ci_term_taxonomy', array('parent' => 0));\r\n\t\t\t}\r\n\t\t\r\n\t\t}\t\r\n\t\t\t\t\r\n\t\t# Fix all post categories, set back to 1\r\n\t\t$get_post_childrens = $this->db->get_where('ci_term_relationships', array('term_taxonomy_id' => $term_id));\r\n\t\t\r\n\t\tif($get_post_childrens->num_rows() > 0){\t\r\n\t\t\r\n\t\t\tforeach($get_post_childrens->result() as $term_post){\r\n\t\t\t\t$this->db->where('object_id', $term_post->object_id);\r\n\t\t\t\t$this->db->update('ci_term_relationships', array('term_taxonomy_id' => 1));\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\t\r\n\t\t$this->db->delete('ci_terms', array('term_id' => $term_id));\r\n\t\t$this->db->delete('ci_term_taxonomy', array('term_taxonomy_id' => $term_id));\r\n\t\t\r\n\t\t$this->db->select('*');\r\n\t\t$this->db->from('ci_terms');\r\n\t\t$this->db->join('ci_term_taxonomy', 'ci_term_taxonomy.term_taxonomy_id = ci_terms.term_id', 'left');\r\n\t\t$this->db->where('ci_terms.term_id', $term_id);\r\n\t\t$delete_check = $this->db->get();\r\n\t\t\r\n\t\tif($delete_check->num_rows() == 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic function is_term($term_id) {\r\n\t\r\n\t\t$check_term_id = $this->db->query('\r\n\t\t\tSELECT t.term_id FROM ci_terms t \r\n\t\t\tLEFT JOIN  ci_term_taxonomy tt ON t.term_id = tt.term_taxonomy_id\r\n\t\t\tWHERE t.term_id = ?', array($term_id)\r\n\t\t);\r\n\t\t\r\n\t\tif($check_term_id->num_rows() > 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic function is_post($post_id) {\r\n\t\t\t\r\n\t\t$check_ID = $this->db->get_where('ci_posts', array('ID' => $post_id), 1, 0);\r\n\t\t\r\n\t\tif($check_ID->num_rows() > 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n[\/cc]\r\n\r\n<h3>Usage<\/h3>\r\n\r\nIn your controller \"___construct\" function, load the post_model:\r\n<code>$this->load->model('post_model');<\/code> \r\n\r\nThen in your PAGE controller, assign the model into a variable:\r\n<code>$data['post'] = $this->post_model;<\/code>\r\n\r\nIn your View, you can call the functions like this:\r\n<code><?php echo $post->get_post_meta(POST_ID, 'META_KEY'); ?><\/code>\r\n",
	"post_title": "WordPress Post Model for CodeIgniter",
	"post_excerpt": "A perfect POST Model library for developing sophisticated Web Applications in CodeIgniter",
	"post_status": "publish",
	"comment_status": "open",
	"ping_status": "closed",
	"post_password": "",
	"post_name": "wordpress-post-model-for-codeigniter",
	"to_ping": "",
	"pinged": "",
	"post_modified": "2015-01-06 10:35:18",
	"post_modified_gmt": "2015-01-06 10:35:18",
	"post_content_filtered": "",
	"post_parent": 0,
	"guid": "http:\/\/carlofontanos.com\/?p=997",
	"menu_order": 0,
	"post_type": "post",
	"post_mime_type": "",
	"comment_count": "0",
	"filter": "raw"
}, {
	"ID": 994,
	"post_author": "1",
	"post_date": "2014-12-08 07:30:15",
	"post_date_gmt": "2014-12-08 07:30:15",
	"post_content": "<a href=\"http:\/\/carlofontanos.com\/wp-content\/uploads\/2014\/12\/codeigniter-banner.jpg\"><img src=\"http:\/\/carlofontanos.com\/wp-content\/uploads\/2014\/12\/codeigniter-banner.jpg\" alt=\"codeigniter-banner\" width=\"1600\" height=\"257\" class=\"alignnone size-full wp-image-995\" \/><\/a>\r\n\r\nThe User Model class bellow is based in WordPress user functions, which makes it easier for WordPress developers to apply the same functions and syntax to their CodeIgniter Web Applications.\r\n\r\n<ul>\r\n\t<li>The database structure is based in WordPress tables using \"ci_\" prefix.<\/li>\r\n\t<li>Uses the same password hashing of WordPress (PHPpass)<\/li>\r\n\t<li>Authentication function included: Login, Register <\/li>\r\n\t<li>Helper functions: update_usermeta, add_usermeta, delete_usermeta, add_user, delete_user, update_user<\/li>\r\n<\/ul>\r\n\r\n\r\n[cc lang = \"php\"]\r\n<?php \r\n\/**\r\n * User_model\r\n *\r\n * @author  \tCarl Victor Fontanos\r\n * @authorurl\twww.carlofontanos.com\r\n * @version \t1.0\r\n *\r\n *\/\r\n \r\n \r\nif ( ! defined('BASEPATH')) exit('No direct script access allowed');\r\n\r\nclass User_model extends CI_Model {\r\n\r\n\tpublic function __construct() {\r\n\t\tparent::__construct();\r\n\t}\r\n\t\r\n\tpublic function login($user_email, $user_pass) {\r\n\t\t\r\n\t\t$query_password = $this->db->get_where('ci_users', array('user_email' => $user_email), 1, 0);\r\n\t\t$user = $query_password->row();\r\n\t\t\r\n\t\tif($this->passwordhash->CheckPassword($user_pass, $user->user_pass)) {\r\n\t\t\t\r\n\t\t\t$newdata = array(\r\n\t\t\t\t'ID'  \t\t\t=> $user->ID,\r\n\t\t\t\t'logged_in'  \t=> TRUE\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t$this->session->set_userdata($newdata);\r\n\t\t\t\r\n\t\t\treturn true;\t\t\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\t\r\n\tpublic function add_user($username, $email, $password) {\r\n\t\r\n\t\t$user_data = array(\r\n\t\t\t'user_login'\t\t=>\t$username,\r\n\t\t\t'user_email'\t\t=>\t$email,\r\n\t\t\t'user_pass'\t\t\t=>\t$this->passwordhash->HashPassword($password),\r\n\t\t\t'user_registered'\t=>\tdate(\"Y-m-d H:i:s\", time()),\r\n\t\t\t'user_nicename'\t\t=>\turl_title($email, 'dash', TRUE),\t\r\n\t\t);\r\n\t\t\r\n\t\t$cleaned_data = $this->security->xss_clean($user_data);\r\n\t\t\r\n\t\t$this->db->insert('ci_users', $user_data);\r\n\t\t\r\n\t\t$this->db->select('ID');\r\n\t\t$user_check = $this->db->get_where('ci_users', array('user_email' => $email), 1, 0);\r\n\t\t\r\n\t\tif($user_check->num_rows() > 0){\r\n\t\t\t$user = $user_check->row();\r\n\t\t\treturn $user->ID;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\t\r\n\t}\r\n\t\r\n\tpublic function add_user_meta($user_id, $meta_key, $meta_value) {\r\n\t\r\n\t\t$user_metadata = array(\r\n\t\t\t'user_id'\t\t\t=>\t$user_id,\r\n\t\t\t'meta_key'\t\t\t=>\t$meta_key,\r\n\t\t\t'meta_value'\t\t=>\t$meta_value\r\n\t\t);\r\n\t\t\r\n\t\t$cleaned_data = $this->security->xss_clean($user_metadata);\r\n\t\t\r\n\t\t$this->db->insert('ci_usermeta', $cleaned_data);\r\n\t\t\r\n\t\t$add_meta_check = $this->db->get_where('ci_usermeta', array('user_id' => $user_id, 'meta_key' => $meta_key, 'meta_value' => $meta_value), 1, 0);\r\n\t\t\r\n\t\tif($add_meta_check->num_rows() > 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic function update_user_meta($user_id, $meta_key, $meta_value) {\r\n\t\t\r\n\t\t$meta_exits = $this->db->get_where('ci_usermeta', array('user_id' => $user_id, 'meta_key' => $meta_key), 1, 0);\r\n\t\t\r\n\t\tif($meta_exits->num_rows() > 0){\r\n\t\t\r\n\t\t\t$user_metadata = array(\r\n\t\t\t\t'meta_value'\t\t=>\t$meta_value\r\n\t\t\t);\r\n\t\t\t\r\n\t\t\t$cleaned_data = $this->security->xss_clean($user_metadata);\r\n\t\t\t\r\n\t\t\t$this->db->where(array('user_id' =>\t$user_id, 'meta_key' =>\t$meta_key));\r\n\t\t\t$this->db->update('ci_usermeta', $cleaned_data);\r\n\t\t\t\r\n\t\t\t$update_meta_check = $this->db->get_where('ci_usermeta', array('user_id' => $user_id, 'meta_key' => $meta_key, 'meta_value' => $meta_value), 1, 0);\r\n\t\t\t\r\n\t\t\tif($update_meta_check->num_rows() > 0){\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else {\r\n\t\t\tself::add_user_meta($user_id, $meta_key, $meta_value);\r\n\t\t\treturn true;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic function delete_user_meta($user_id, $meta_key = '') {\r\n\t\t\r\n\t\tif(!empty($meta_key)){\r\n\t\t\t$user_metadata = array(\r\n\t\t\t\t'user_id'\t\t\t=>\t$user_id,\r\n\t\t\t\t'meta_key'\t\t\t=>\t$meta_key\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$user_metadata = array(\r\n\t\t\t\t'user_id'\t\t\t=>\t$user_id\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\t$cleaned_data = $this->security->xss_clean($user_metadata);\r\n\t\t\t\r\n\t\t$this->db->where($cleaned_data);\r\n\t\t$this->db->delete('ci_usermeta');\r\n\r\n\t\t$delete_meta_check = $this->db->get_where('ci_usermeta', $user_metadata, 1, 0);\r\n\t\t\t\r\n\t\tif($delete_meta_check->num_rows() == 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic function get_user_meta($user_id, $key = '', $single = TRUE) {\r\n\t\t\r\n\t\t$where = '';\r\n\t\t\r\n\t\tif($key){\r\n\t\t\t$where .= ' AND meta_key = \"'.$key.'\"';\r\n\t\t}\r\n\t\t\r\n\t\t$user_meta = $this->db->query('SELECT * FROM ci_usermeta WHERE user_id = ?'.$where, array($user_id) );\r\n\t\t\r\n\t\tif($single){\r\n\t\t\r\n\t\t\t$row = $user_meta->row();\r\n\t\t\tif($row){\r\n\t\t\t\treturn $row->meta_value;\r\n\t\t\t} else {\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t} else {\r\n\t\t\treturn $user_meta->result();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic function update_user($userdata_array) {\r\n\t\t\r\n\t\textract($userdata_array); \r\n\t\t$data = '';\r\n\t\t\r\n\t\tif(!empty($user_login)){\r\n\t\t\t$data['user_login'] = $user_login;\r\n\t\t}\r\n\t\tif(!empty($user_email)){\r\n\t\t\t$data['user_email'] = $user_email; \r\n\t\t\t$data['user_nicename'] = url_title($user_email, 'dash', TRUE);\r\n\t\t}\r\n\t\tif(!empty($user_pass)){\r\n\t\t\t$data['user_pass'] = $this->passwordhash->HashPassword($user_pass);\r\n\t\t}\r\n\t\t\t\t\r\n\t\t$cleaned_data = $this->security->xss_clean($data);\r\n\t\t\r\n\t\t$this->db->update('ci_users', $cleaned_data);\r\n\t\t\r\n\t}\r\n\t\r\n\tpublic function delete_user($user_id) {\r\n\t\t\r\n\t\t$this->db->delete('ci_users', array('ID' => $user_id));\r\n\t\tself::delete_user_meta($user_id);\r\n\t\t\r\n\t\t$delete_check = $this->db->query('SELECT * from ci_users u LEFT JOIN ci_usermeta um ON u.ID = um.user_id WHERE u.ID = ?', array($user_id) );\r\n\t\t\r\n\t\tif($delete_check->num_rows() == 0){\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n[\/cc]\r\n\r\n<h3>Usage<\/h3>\r\n\r\nIn your controller \"___construct\" function, load the user_model:\r\n<code>$this->load->model('user_model');<\/code> \r\n\r\nThen in your PAGE controller, assign the model into a variable:\r\n<code>$data['user'] = $this->user_model;<\/code>\r\n\r\nIn your View, you can call the functions like this:\r\n<code><?php echo $user->get_user_meta($current_user->ID, 'first_name'); ?><\/code>",
	"post_title": "WordPress User Model for CodeIgniter",
	"post_excerpt": "A usefull User Model library for your custom  Web Application",
	"post_status": "publish",
	"comment_status": "open",
	"ping_status": "closed",
	"post_password": "",
	"post_name": "wordpress-user-model-for-codeigniter",
	"to_ping": "",
	"pinged": "",
	"post_modified": "2015-01-06 10:35:25",
	"post_modified_gmt": "2015-01-06 10:35:25",
	"post_content_filtered": "",
	"post_parent": 0,
	"guid": "http:\/\/carlofontanos.com\/?p=994",
	"menu_order": 0,
	"post_type": "post",
	"post_mime_type": "",
	"comment_count": "0",
	"filter": "raw"
}]
